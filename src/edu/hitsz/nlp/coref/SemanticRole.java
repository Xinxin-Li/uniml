/** *  */package edu.hitsz.nlp.coref;import java.io.FileWriter;import java.io.IOException;import java.util.ArrayList;/** * @author tm * */public class SemanticRole {		public class SemPredicate{		String label;		String frameID;		int position;	}		public class SemArgument{		String label;		String relation;		int start;		int end;	}	 	public int predicateNumber;	ArrayList<SemPredicate> predicates;	ArrayList<ArrayList<SemArgument>> arguments;		public SemanticRole(){		predicateNumber = 0;		predicates = new ArrayList<SemPredicate>();		arguments = new ArrayList<ArrayList<SemArgument>>();	}		/**	 * check whether there exists semantic role labeling in the sentence, by comparing predicteLemma with "-";	 * and read them		 * @param predicateLemma	 * @return	 */	public boolean readPred(ArrayList<String> predicateLemma){		int senLength = predicateLemma.size();		for( int i=0; i<senLength; i++){			String tmpPred = predicateLemma.get(i);			if(!tmpPred.equals("-")){				SemPredicate newPred = new SemPredicate();				newPred.label = tmpPred;				newPred.position = i;				predicates.add(newPred);			}		}		predicateNumber = predicates.size();		if(predicateNumber>0)			return true;		return false;	}		/**	 * check whether there exists semantic role labeling in the sentence, by comparing predicteLemma with "-"		 * @param predicateLemma	 * @param framesetID	 * @return	 */	public boolean readPredAndFrame(ArrayList<String> predicateLemma, ArrayList<String> framesetID){		int senLength = predicateLemma.size();		if(framesetID.size()!=senLength){			System.out.println("the size of predicateLemma is different from the size of framesetID");			System.exit(0);		}		for( int i=0; i<senLength; i++){			String tmpPred = predicateLemma.get(i);			if(!tmpPred.equals("-")){				SemPredicate newPred = new SemPredicate();				newPred.label = tmpPred;				newPred.frameID = framesetID.get(i);				newPred.position = i;					predicates.add(newPred);			}		}		predicateNumber = predicates.size();		if(predicateNumber>0)			return true;		return false;	}		/**	 * find all predicate numbers of the argument from kStart to kEnd	 * @param kStart	 * @param kEnd	 * @return	 */	public ArrayList<String> findPredicate(int kStart, int kEnd){		ArrayList<String> matchPredicateNumber = new ArrayList<String>();		if(predicateNumber>0){			for(int i=0; i<predicateNumber; i++){				if(arguments.size()>i){					int argumentsNumber = arguments.get(i).size();					if(argumentsNumber > 0){						for(int j=0; j<argumentsNumber; j++){							if(arguments.get(i).get(j).start == kStart									&& arguments.get(i).get(j).end == kEnd)								matchPredicateNumber.add(predicates.get(i).label);						}					}				}			}		}		return matchPredicateNumber;			}			/**	 * find the semantic role of the argument from kStart to kEnd from all predictates	 * @param kStart	 * @param kEnd	 * @return	 */	public String findRole(int kStart, int kEnd){		if(predicateNumber>0){			for(int i=0; i<predicateNumber; i++){				if(arguments.size()>i){					int argumentsNumber = arguments.get(i).size();					if(argumentsNumber > 0){						for(int j=0; j<argumentsNumber; j++){							if(arguments.get(i).get(j).start == kStart									&& arguments.get(i).get(j).end == kEnd && arguments.get(i).get(j).label != null)								return arguments.get(i).get(j).label;						}					}				}			}		}		return "none";			}		/**	 * find the semantic role of the argument from kStart to kEnd from specified predicate	 * @param kStart	 * @param kEnd	 * @return	 */	public String findRole(int kStart, int kEnd, String pred){		if(predicateNumber>0){			for(int i=0; i<predicateNumber; i++){				if(predicates.get(i).label.equals(pred) && arguments.size()>i){					int argumentsNumber = arguments.get(i).size();					if(argumentsNumber > 0){						for(int j=0; j<argumentsNumber; j++){							if(arguments.get(i).get(j).start == kStart									&& arguments.get(i).get(j).end == kEnd && arguments.get(i).get(j).label != null)								return arguments.get(i).get(j).label;						}					}				}			}		}		return "none";			}					/**	 * read arguments 	 * @param predicateArguments	 */	public void readArgument(ArrayList<ArrayList<String>> predicateArguments){		/*		if(predicateArguments.size()!=predicateNumber){			System.out.println("the size of predicateLemma is different from the size of arguments!");			System.exit(0);		}		*/		int predicateArgumentsNumber = predicateArguments.size();		int senLength = predicateArguments.get(0).size();		for(int i=0; i<predicateArgumentsNumber; i++){			ArrayList<SemArgument> oneArgs = new ArrayList<SemArgument>();			int j=0;			while(j<senLength){				if(predicateArguments.get(i).get(j).startsWith("(")){					int starIndex = predicateArguments.get(i).get(j).indexOf("*");					SemArgument newArg = new SemArgument();					newArg.relation = predicateArguments.get(i).get(j).substring(1,starIndex);					newArg.start = j;					while( j < senLength &&  !predicateArguments.get(i).get(j).endsWith(")"))						j++;					newArg.end = j;					oneArgs.add(newArg);															}									j++;			}			arguments.add(oneArgs);		}			}			public void storeSR(FileWriter newWriter) throws IOException{		if(predicateNumber==0){			System.out.println("no predicate exists");			System.exit(0);		}		for(int i=0; i<predicateNumber; i++){			newWriter.write(predicates.get(i).position+"\t"+predicates.get(i).label+"\t"+predicates.get(i).frameID+"\t");			int argumentNumber = arguments.get(i).size();			if(argumentNumber!=0){				for(int j=0; j< argumentNumber; j++){					newWriter.write(arguments.get(i).get(j).start+"-"+arguments.get(i).get(j).end+":"+arguments.get(i).get(j).relation+"\t");				}			}			newWriter.write("\n");		}	}				public void display(){		if(predicateNumber==0){			System.out.println("no predicate exists");			System.exit(0);		}		for(int i=0; i<predicateNumber; i++){			System.out.print(predicates.get(i).position+"\t"+predicates.get(i).label+"\t"+predicates.get(i).frameID+"\t");			int argumentNumber = arguments.get(i).size();			if(argumentNumber!=0){				for(int j=0; j< argumentNumber; j++){					System.out.print(arguments.get(i).get(j).start+"-"+arguments.get(i).get(j).end+":"+arguments.get(i).get(j).relation+"\t");				}			}			System.out.println();		}	}		private static void test(){		ArrayList<String> pred=new ArrayList<String>();		ArrayList<String> frame=new ArrayList<String>();		ArrayList<String> arg1=new ArrayList<String>();		ArrayList<String> arg2=new ArrayList<String>();		ArrayList<String> arg3=new ArrayList<String>();		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("be");   frame.add("03");  arg1.add("(V*)"); arg2.add("*");      arg3.add("*");		pred.add("tell"); frame.add("01");  arg1.add("*");    arg2.add("(V*)");   arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("(ARG1*"); arg3.add("(ARG0*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*)");		pred.add("save"); frame.add("02");  arg1.add("*");    arg2.add("*");      arg3.add("(V*)");   		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*)");     arg3.add("*");		pred.add("-");    frame.add("-");   arg1.add("*");    arg2.add("*");      arg3.add("*");		ArrayList<ArrayList<String>> args = new ArrayList<ArrayList<String>>();		args.add(arg1); args.add(arg2); args.add(arg3);				SemanticRole newSR = new SemanticRole();		newSR.readPredAndFrame(pred, frame);		newSR.readArgument(args);		newSR.display();					}			/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		test();	}}